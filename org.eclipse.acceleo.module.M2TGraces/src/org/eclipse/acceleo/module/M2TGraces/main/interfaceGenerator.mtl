[comment encoding = UTF-8 /]
[**
 * The documentation of the module interfaceGenerator.
 */]
[module interfaceGenerator('http://www.eclipse.org/uml2/5.0.0/UML')]
[import org::eclipse::acceleo::module::M2TGraces::services::LocationServicesWrapper/]
[import org::eclipse::acceleo::module::M2TGraces::main::classifierGenerator/]


[**
 * The documentation of the template generateInterface.
 * @param aClass
 */]
[template public generateInterface(aInterface : Interface)]

[interfaceDescription(aInterface)/]

[generalizationDescription(aInterface)/]

[comment][if (aClass.getAppliedStereotypes() -> size() > 0)]
La clase es:
[for (stereotype: Stereotype | aClass.getAppliedStereotypes()) separator(', ')]
[stereotype.name/]
[/for]
[/if][/comment]

[attributeDescription(aInterface)/]

[operationDescription(aInterface)/]

[relationshipsDescription(aInterface)/]


[/template]

[template public interfaceDescription(aInterface : Interface)]
<h2 class="class" id="[aInterface.namespace.name/].[aInterface.name/]">
[comment][if (aInterface.isAbstract)][loc('interfaceAbstract', Sequence{aInterface.name, loc(aInterface.visibility.toString(), Sequence{}) })/]
[else][loc('interfaceNotAbstract', Sequence{aInterface.name, loc(aInterface.visibility.toString(), Sequence{}) })/]
[/if][/comment]
[loc('interfaceNotAbstract', Sequence{aInterface.name})/]
</h2>
[/template]

[template public generalizationDescription(aInterface : Interface)]
[comment][if (aInterface.getSourceDirectedRelationships() -> filter(Generalization) -> size() > 0)]
<h3 class="inheritance">[loc('inheritanceList', Sequence{})/]</h3>
<ul>
[for (gen: Generalization | (aInterface.getSourceDirectedRelationships() -> filter(Generalization) -> asOrderedSet() -> sortedBy(name)))]
	<li class="inheritance">[gen.inheritance()/]</li>
[/for]
</ul>
[else]<h3 class="inheritance">[loc('notInheritance', Sequence{})/]</h3>[/if]

[if (aInterface.getSourceDirectedRelationships() -> filter(Generalization) -> size() > 0)]
<h3 class="superclass">[loc('extendedList', Sequence{})/]</h3>
<ul>
[for (gen: Generalization | (aInterface.getTargetDirectedRelationships() -> filter(Generalization) -> asOrderedSet() -> sortedBy(name)))]
	<li class="Generalization">[gen.superclass()/]</li>
[/for]
</ul>
[else]<h3 class="superclass">[loc('notExtended', Sequence{})/]</h3>[/if][/comment]
[generalizationClassifierDescription(aInterface)/]
[/template]

[template public attributeDescription(aInterface : Interface)]
[attributeClassifierDescription(aInterface)/]
[/template]

[template public operationDescription(aInterface : Interface)]
[if (aInterface.ownedOperation -> size() > 0) ]
	<h3 class="operations" id="[aInterface.name/].operations">[loc('operationsInterfaceHeader', Sequence{aInterface.name, loc('interface', Sequence{})})/]</h3>
	<ul>
	[for (op: Operation | aInterface.ownedOperation) ]
	<li class="operation" id="[op.name/]">

	[comment]Check if is constructor[/comment]

	[if (op.name) = aInterface.name]
		[if (op.ownedParameter -> size() > 0)]
			[loc('constructorList', Sequence{'<b>'+op.name+'</b>'})/]
			<ol>
			[for (param: Parameter | op.ownedParameter)] 
				<li class="Parameter" name"[param.name/]">[loc('paramList', Sequence{'<b>'+param.name+'</b>', '<em>'+param.type.name+'</em>'})/]</li>
			[/for]
			</ol>
		[else]
			[loc('constructorListNoParam', Sequence{'<b>'+op.name+'</b>'})/]
		[/if]
[comment]	If is not, treat it like a normal interface[/comment]
	[else]
[comment]Has parameters? then load the operationList string. If not, the operationNoParamList string[/comment]
		[if (op.ownedParameter -> size() > 0)]
[comment]Check if its static or abstract, and insert the words in the string[/comment]
			[if (op.isStatic)]
				[if (op.isAbstract)]
					[loc('operationList', Sequence{'<b>'+op.name+'</b>', '<em>'+loc('static', Sequence{})+'</em>', '<em>'+loc('abstract', Sequence{})+'</em>', loc(op.visibility.toString(), Sequence{}) })/]
				[else]
					[loc('operationList', Sequence{'<b>'+op.name+'</b>', '<em>'+loc('static', Sequence{})+'</em>', '', loc(op.visibility.toString(), Sequence{}) })/]
				[/if]
			[else]
				[if (op.isAbstract)]
					[loc('operationList', Sequence{'<b>'+op.name+'</b>', '', '<em>'+loc('abstract', Sequence{})+'</em>', loc(op.visibility.toString(), Sequence{}) })/]
				[else]
					[loc('operationList', Sequence{'<b>'+op.name+'</b>', '', '<em>'+loc('abstract', Sequence{})+'</em>', loc(op.visibility.toString(), Sequence{}) })/]
				[/if]
			[/if]
			<ol>
			[for (param: Parameter | op.ownedParameter)] 
				<li class="Parameter" name"[param.name/]">[loc('paramList', Sequence{'<b>'+param.name+'</b>', '<em>'+param.type.name+'</em>'})/]</li>
			[/for]
			</ol>
		[else]
[comment]If it doesn't have parameters...[/comment]
			[if (op.isStatic)]
				[if (op.isAbstract)]
					[loc('operationNoParamList', Sequence{'<b>'+op.name+'</b>', '<em>'+loc('static', Sequence{})+'</em>', '<em>'+loc('abstract', Sequence{})+'</em>', loc(op.visibility.toString(), Sequence{}) })/]
				[else]
					[loc('operationNoParamList', Sequence{'<b>'+op.name+'</b>', '<em>'+loc('static', Sequence{})+'</em>', '', loc(op.visibility.toString(), Sequence{}) })/]
				[/if]
			[else]
				[if (op.isAbstract)]
					[loc('operationNoParamList', Sequence{'<b>'+op.name+'</b>', '', '<em>'+loc('abstract', Sequence{})+'</em>', loc(op.visibility.toString(), Sequence{}) })/]
				[else]
					[loc('operationNoParamList', Sequence{'<b>'+op.name+'</b>', '', '', loc(op.visibility.toString(), Sequence{}) })/]
				[/if]
			[/if]
		[/if]
		
		[if (op.getReturnResult() -> size() > 0) or (op.getReturnResult().name) = aInterface.name]
			<p class="Return" name"[op.getReturnResult().name/]">[loc('ReturnWhat', Sequence{'<b>'+op.getReturnResult().name+'</b>', '<em>'+op.getReturnResult().type.name+'</em>'})/]</p>
		[else] 
			[loc('noReturn', Sequence{})/]
		[/if]
	[/if]
	</li>
	[/for]
	</ul>
[else]
	<h3 class="operations" id="[aInterface.name/].operations">[loc('noOperationToList', Sequence{aInterface.name, loc('interface', Sequence{})})/]</h3>
[/if]
[/template]

[template public relationshipsDescription(aInterface : Interface)]
[relationshipsClassifierDescription(aInterface)/]
[/template]


[template public inheritance(gen : Generalization)]
	<a href="#[gen.general.namespace.name/].[gen.general.name/]">[gen.general.name/]</a>
[/template]

[template public superclass(gen : Generalization)]
	<a href="#[gen.specific.namespace.name/].[gen.specific.name/]">[gen.specific.name/]</a>
[/template]


