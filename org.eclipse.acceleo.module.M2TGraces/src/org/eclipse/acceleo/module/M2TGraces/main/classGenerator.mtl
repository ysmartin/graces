[comment encoding = UTF-8 /]
[**
 * The documentation of the module classGenerator.
 */]

[module classGenerator('http://www.eclipse.org/uml2/5.0.0/UML')]
[import org::eclipse::acceleo::module::M2TGraces::services::LocationServicesWrapper/]
[import org::eclipse::acceleo::module::M2TGraces::main::classifierGenerator/]

[**
 * Generate the text of the Class. It has the methods that can't be generalized to Classifiers.
 * @param aClass
 */]
[template public generateClass(aClass : Class)]

[classDescription(aClass)/]

[generalizationDescription(aClass)/]

[attributeDescription(aClass)/]

[operationDescription(aClass)/]

[relationshipsDescription(aClass)/]

[/template]

[template public classDescription(aClass : Class)]
<h2 class="class" id="[aClass.namespace.name/].[aClass.name/]">
[if (aClass.isAbstract)][loc('classAbstract', Sequence{aClass.name, loc(aClass.visibility.toString(), Sequence{}) })/]
[else][loc('classNotAbstract', Sequence{aClass.name, loc(aClass.visibility.toString(), Sequence{}) })/]
[/if]
</h2>
[/template]

[template public generalizationDescription(aClass : Class)]
[generalizationClassifierDescription(aClass)/]
[/template]

[template public attributeDescription(aClass : Class)]
[attributeClassifierDescription(aClass)/]
[/template]

[template public operationDescription(aClass : Class)]
[if (aClass.ownedOperation -> size() > 0) ]
	<h3 class="operations" id="[aClass.name/].operations">[loc('operationsHeader', Sequence{aClass.name, loc('class', Sequence{})})/]</h3>
	<ul>
	[for (op: Operation | aClass.ownedOperation) ]
	<li class="operation" id="[op.name/]">

	[comment]Check if is constructor[/comment]

	[if (op.name) = aClass.name]
		[if (op.ownedParameter -> size() > 0)]
			[loc('constructorList', Sequence{'<b>'+op.name+'</b>'})/]
			<ol>
			[for (param: Parameter | op.ownedParameter)] 
				<li class="Parameter" name"[param.name/]">[loc('paramList', Sequence{'<b>'+param.name+'</b>', '<em>'+param.type.name+'</em>'})/]</li>
			[/for]
			</ol>
		[else]
			[loc('constructorListNoParam', Sequence{'<b>'+op.name+'</b>'})/]
		[/if]
[comment]	If is not, treat it like a normal class[/comment]
	[else]
[comment]Has parameters? then load the operationList string. If not, the operationNoParamList string[/comment]
		[if (op.ownedParameter -> size() > 0)]
[comment]Check if its static or abstract, and insert the words in the string[/comment]
			[if (op.isStatic)]
				[if (op.isAbstract)]
					[loc('operationList', Sequence{'<b>'+op.name+'</b>', '<em>'+loc('static', Sequence{})+'</em>', '<em>'+loc('abstract', Sequence{})+'</em>', loc(op.visibility.toString(), Sequence{}) })/]
				[else]
					[loc('operationList', Sequence{'<b>'+op.name+'</b>', '<em>'+loc('static', Sequence{})+'</em>', '', loc(op.visibility.toString(), Sequence{}) })/]
				[/if]
			[else]
				[if (op.isAbstract)]
					[loc('operationList', Sequence{'<b>'+op.name+'</b>', '', '<em>'+loc('abstract', Sequence{})+'</em>', loc(op.visibility.toString(), Sequence{}) })/]
				[else]
					[loc('operationList', Sequence{'<b>'+op.name+'</b>', '', '<em>'+loc('abstract', Sequence{})+'</em>', loc(op.visibility.toString(), Sequence{}) })/]
				[/if]
			[/if]
			<ol>
			[for (param: Parameter | op.ownedParameter)] 
				<li class="Parameter" name"[param.name/]">[loc('paramList', Sequence{'<b>'+param.name+'</b>', '<em>'+param.type.name+'</em>'})/]</li>
			[/for]
			</ol>
		[else]
[comment]If it doesn't have parameters...[/comment]
			[if (op.isStatic)]
				[if (op.isAbstract)]
					[loc('operationNoParamList', Sequence{'<b>'+op.name+'</b>', '<em>'+loc('static', Sequence{})+'</em>', '<em>'+loc('abstract', Sequence{})+'</em>', loc(op.visibility.toString(), Sequence{}) })/]
				[else]
					[loc('operationNoParamList', Sequence{'<b>'+op.name+'</b>', '<em>'+loc('static', Sequence{})+'</em>', '', loc(op.visibility.toString(), Sequence{}) })/]
				[/if]
			[else]
				[if (op.isAbstract)]
					[loc('operationNoParamList', Sequence{'<b>'+op.name+'</b>', '', '<em>'+loc('abstract', Sequence{})+'</em>', loc(op.visibility.toString(), Sequence{}) })/]
				[else]
					[loc('operationNoParamList', Sequence{'<b>'+op.name+'</b>', '', '', loc(op.visibility.toString(), Sequence{}) })/]
				[/if]
			[/if]
		[/if]
		
		[if (op.getReturnResult() -> size() > 0) or (op.getReturnResult().name) = aClass.name]
			<p class="Return" name"[op.getReturnResult().name/]">[loc('ReturnWhat', Sequence{'<b>'+op.getReturnResult().name+'</b>', '<em>'+op.getReturnResult().type.name+'</em>'})/]</p>
		[else] 
			[loc('noReturn', Sequence{})/]
		[/if]
	[/if]
	</li>
	[/for]
	</ul>
[else]
	<h3 class="operations" id="[aClass.name/].operations">[loc('noOperationToList', Sequence{aClass.name, loc('class', Sequence{})})/]</h3>
[/if]
[/template]

[template public relationshipsDescription(aClass : Class)]
[relationshipsClassifierDescription(aClass)/]
[/template]

[template public inheritance(gen : Generalization)]
	<a href="#[gen.general.namespace.name/].[gen.general.name/]">[gen.general.name/]</a>
[/template]

[template public superclass(gen : Generalization)]
	<a href="#[gen.specific.namespace.name/].[gen.specific.name/]">[gen.specific.name/]</a>
[/template]
