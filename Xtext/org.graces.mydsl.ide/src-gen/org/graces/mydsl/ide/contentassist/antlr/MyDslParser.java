/*
 * generated by Xtext 2.13.0
 */
package org.graces.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.graces.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.graces.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getClassBodyAccess().getAlternatives_1(), "rule__ClassBody__Alternatives_1");
					put(grammarAccess.getOpBodyAccess().getAlternatives_2_1(), "rule__OpBody__Alternatives_2_1");
					put(grammarAccess.getArgBodyAccess().getAlternatives_0(), "rule__ArgBody__Alternatives_0");
					put(grammarAccess.getModelDefinitionAccess().getGroup(), "rule__ModelDefinition__Group__0");
					put(grammarAccess.getClassDeclAccess().getGroup(), "rule__ClassDecl__Group__0");
					put(grammarAccess.getClassHeaderAccess().getGroup(), "rule__ClassHeader__Group__0");
					put(grammarAccess.getClassBodyAccess().getGroup(), "rule__ClassBody__Group__0");
					put(grammarAccess.getClassBodyAccess().getGroup_1_0(), "rule__ClassBody__Group_1_0__0");
					put(grammarAccess.getClassBodyAccess().getGroup_1_1(), "rule__ClassBody__Group_1_1__0");
					put(grammarAccess.getAttrBodyAccess().getGroup(), "rule__AttrBody__Group__0");
					put(grammarAccess.getAttrBodyAccess().getGroup_1(), "rule__AttrBody__Group_1__0");
					put(grammarAccess.getOpBodyAccess().getGroup(), "rule__OpBody__Group__0");
					put(grammarAccess.getOpBodyAccess().getGroup_2(), "rule__OpBody__Group_2__0");
					put(grammarAccess.getOpBodyAccess().getGroup_2_1_1(), "rule__OpBody__Group_2_1_1__0");
					put(grammarAccess.getOpBodyAccess().getGroup_3(), "rule__OpBody__Group_3__0");
					put(grammarAccess.getArgBodyAccess().getGroup(), "rule__ArgBody__Group__0");
					put(grammarAccess.getArgBodyAccess().getGroup_1(), "rule__ArgBody__Group_1__0");
					put(grammarAccess.getModelDefinitionAccess().getModelnameAssignment_1(), "rule__ModelDefinition__ModelnameAssignment_1");
					put(grammarAccess.getClassDeclAccess().getHeaderAssignment_0(), "rule__ClassDecl__HeaderAssignment_0");
					put(grammarAccess.getClassDeclAccess().getBodyAssignment_1(), "rule__ClassDecl__BodyAssignment_1");
					put(grammarAccess.getClassHeaderAccess().getClassnameAssignment_1(), "rule__ClassHeader__ClassnameAssignment_1");
					put(grammarAccess.getClassBodyAccess().getAttributesAssignment_1_0_0(), "rule__ClassBody__AttributesAssignment_1_0_0");
					put(grammarAccess.getClassBodyAccess().getOperationsAssignment_1_1_0(), "rule__ClassBody__OperationsAssignment_1_1_0");
					put(grammarAccess.getAttrBodyAccess().getAttrnameAssignment_1_0(), "rule__AttrBody__AttrnameAssignment_1_0");
					put(grammarAccess.getAttrBodyAccess().getAttrtypeAssignment_1_2(), "rule__AttrBody__AttrtypeAssignment_1_2");
					put(grammarAccess.getOpBodyAccess().getOpnameAssignment_1(), "rule__OpBody__OpnameAssignment_1");
					put(grammarAccess.getOpBodyAccess().getArgsAssignment_2_1_0(), "rule__OpBody__ArgsAssignment_2_1_0");
					put(grammarAccess.getOpBodyAccess().getArgsAssignment_2_1_1_0(), "rule__OpBody__ArgsAssignment_2_1_1_0");
					put(grammarAccess.getOpBodyAccess().getReturntypeAssignment_3_1(), "rule__OpBody__ReturntypeAssignment_3_1");
					put(grammarAccess.getArgBodyAccess().getArgnameAssignment_1_0(), "rule__ArgBody__ArgnameAssignment_1_0");
					put(grammarAccess.getArgBodyAccess().getArgtypeAssignment_1_2(), "rule__ArgBody__ArgtypeAssignment_1_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
