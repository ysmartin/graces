/*
 * generated by Xtext 2.13.0
 */
package org.graces.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENDECLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cClazzesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClazzesClassParserRuleCall_3_0 = (RuleCall)cClazzesAssignment_3.eContents().get(0);
		private final RuleCall cCLOSEDECLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// USAR HIDDEN TERMINAL SYMBOLS PARA TRATAR ESPACIOS Y DEMAS MORRALLA
		//Model:
		//	'model' name=ID OPENDECL clazzes+=Class* CLOSEDECL;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=ID OPENDECL clazzes+=Class* CLOSEDECL
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//OPENDECL
		public RuleCall getOPENDECLTerminalRuleCall_2() { return cOPENDECLTerminalRuleCall_2; }
		
		//clazzes+=Class*
		public Assignment getClazzesAssignment_3() { return cClazzesAssignment_3; }
		
		//Class
		public RuleCall getClazzesClassParserRuleCall_3_0() { return cClazzesClassParserRuleCall_3_0; }
		
		//CLOSEDECL
		public RuleCall getCLOSEDECLTerminalRuleCall_4() { return cCLOSEDECLTerminalRuleCall_4; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderClassHeaderParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyClassBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Class:
		//	header=ClassHeader body=ClassBody;
		@Override public ParserRule getRule() { return rule; }
		
		//header=ClassHeader body=ClassBody
		public Group getGroup() { return cGroup; }
		
		//header=ClassHeader
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }
		
		//ClassHeader
		public RuleCall getHeaderClassHeaderParserRuleCall_0_0() { return cHeaderClassHeaderParserRuleCall_0_0; }
		
		//body=ClassBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//ClassBody
		public RuleCall getBodyClassBodyParserRuleCall_1_0() { return cBodyClassBodyParserRuleCall_1_0; }
	}
	public class ClassHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.ClassHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ClassHeader:
		//	'class' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ClassBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.ClassBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPENDECLTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cAttributesAttrBodyParserRuleCall_1_0_0_0 = (RuleCall)cAttributesAssignment_1_0_0.eContents().get(0);
		private final RuleCall cCLOSELINETerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cOperationsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperationsOpBodyParserRuleCall_1_1_0_0 = (RuleCall)cOperationsAssignment_1_1_0.eContents().get(0);
		private final RuleCall cCLOSELINETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cCLOSEDECLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ClassBody:
		//	OPENDECL (attributes+=AttrBody CLOSELINE | operations+=OpBody CLOSELINE)*
		//	CLOSEDECL;
		@Override public ParserRule getRule() { return rule; }
		
		//// Posible problemon
		//OPENDECL (attributes+=AttrBody CLOSELINE | operations+=OpBody CLOSELINE)* CLOSEDECL
		public Group getGroup() { return cGroup; }
		
		//// Posible problemon
		//OPENDECL
		public RuleCall getOPENDECLTerminalRuleCall_0() { return cOPENDECLTerminalRuleCall_0; }
		
		//(attributes+=AttrBody CLOSELINE | operations+=OpBody CLOSELINE)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//attributes+=AttrBody CLOSELINE
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//attributes+=AttrBody
		public Assignment getAttributesAssignment_1_0_0() { return cAttributesAssignment_1_0_0; }
		
		//AttrBody
		public RuleCall getAttributesAttrBodyParserRuleCall_1_0_0_0() { return cAttributesAttrBodyParserRuleCall_1_0_0_0; }
		
		//CLOSELINE
		public RuleCall getCLOSELINETerminalRuleCall_1_0_1() { return cCLOSELINETerminalRuleCall_1_0_1; }
		
		//operations+=OpBody CLOSELINE
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operations+=OpBody
		public Assignment getOperationsAssignment_1_1_0() { return cOperationsAssignment_1_1_0; }
		
		//OpBody
		public RuleCall getOperationsOpBodyParserRuleCall_1_1_0_0() { return cOperationsOpBodyParserRuleCall_1_1_0_0; }
		
		//CLOSELINE
		public RuleCall getCLOSELINETerminalRuleCall_1_1_1() { return cCLOSELINETerminalRuleCall_1_1_1; }
		
		//CLOSEDECL
		public RuleCall getCLOSEDECLTerminalRuleCall_2() { return cCLOSEDECLTerminalRuleCall_2; }
	}
	public class AttrBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.AttrBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVISIBILITYTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		
		//AttrBody:
		//	VISIBILITY (name=ID ':' type=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//VISIBILITY (name=ID ':' type=ID)
		public Group getGroup() { return cGroup; }
		
		//VISIBILITY
		public RuleCall getVISIBILITYTerminalRuleCall_0() { return cVISIBILITYTerminalRuleCall_0; }
		
		//name=ID ':' type=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//type=ID
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_2_0() { return cTypeIDTerminalRuleCall_1_2_0; }
	}
	public class OpBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.OpBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENARGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cArgsArgBodyParserRuleCall_3_0_0_0 = (RuleCall)cArgsAssignment_3_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsArgBodyParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final RuleCall cCLOSEARGTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReturnKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		
		//OpBody:
		//	'operation' name=ID OPENARG ((args+=ArgBody ',')* args+=ArgBody)? CLOSEARG ('return' type=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'operation' name=ID OPENARG ((args+=ArgBody ',')* args+=ArgBody)? CLOSEARG ('return' type=ID)?
		public Group getGroup() { return cGroup; }
		
		//'operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//OPENARG
		public RuleCall getOPENARGTerminalRuleCall_2() { return cOPENARGTerminalRuleCall_2; }
		
		//((args+=ArgBody ',')* args+=ArgBody)?
		public Group getGroup_3() { return cGroup_3; }
		
		//(args+=ArgBody ',')*
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//args+=ArgBody
		public Assignment getArgsAssignment_3_0_0() { return cArgsAssignment_3_0_0; }
		
		//ArgBody
		public RuleCall getArgsArgBodyParserRuleCall_3_0_0_0() { return cArgsArgBodyParserRuleCall_3_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_3_0_1() { return cCommaKeyword_3_0_1; }
		
		//args+=ArgBody
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//ArgBody
		public RuleCall getArgsArgBodyParserRuleCall_3_1_0() { return cArgsArgBodyParserRuleCall_3_1_0; }
		
		//CLOSEARG
		public RuleCall getCLOSEARGTerminalRuleCall_4() { return cCLOSEARGTerminalRuleCall_4; }
		
		//('return' type=ID)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'return'
		public Keyword getReturnKeyword_5_0() { return cReturnKeyword_5_0; }
		
		//type=ID
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_5_1_0() { return cTypeIDTerminalRuleCall_5_1_0; }
	}
	public class ArgBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.ArgBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cInKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOutKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		
		//ArgBody:
		//	('in' | 'out') (name=ID ':' type=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//('in' | 'out') (name=ID ':' type=ID)
		public Group getGroup() { return cGroup; }
		
		//'in' | 'out'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'in'
		public Keyword getInKeyword_0_0() { return cInKeyword_0_0; }
		
		//'out'
		public Keyword getOutKeyword_0_1() { return cOutKeyword_0_1; }
		
		//name=ID ':' type=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//type=ID
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_2_0() { return cTypeIDTerminalRuleCall_1_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final ClassElements pClass;
	private final ClassHeaderElements pClassHeader;
	private final ClassBodyElements pClassBody;
	private final AttrBodyElements pAttrBody;
	private final OpBodyElements pOpBody;
	private final ArgBodyElements pArgBody;
	private final TerminalRule tVISIBILITY;
	private final TerminalRule tOPENDECL;
	private final TerminalRule tCLOSEDECL;
	private final TerminalRule tCLOSELINE;
	private final TerminalRule tOPENARG;
	private final TerminalRule tCLOSEARG;
	private final TerminalRule tLOWERCASE;
	private final TerminalRule tUPPERCASE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pClass = new ClassElements();
		this.pClassHeader = new ClassHeaderElements();
		this.pClassBody = new ClassBodyElements();
		this.pAttrBody = new AttrBodyElements();
		this.pOpBody = new OpBodyElements();
		this.pArgBody = new ArgBodyElements();
		this.tVISIBILITY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.VISIBILITY");
		this.tOPENDECL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.OPENDECL");
		this.tCLOSEDECL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.CLOSEDECL");
		this.tCLOSELINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.CLOSELINE");
		this.tOPENARG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.OPENARG");
		this.tCLOSEARG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.CLOSEARG");
		this.tLOWERCASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.LOWERCASE");
		this.tUPPERCASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.graces.mydsl.MyDsl.UPPERCASE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.graces.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// USAR HIDDEN TERMINAL SYMBOLS PARA TRATAR ESPACIOS Y DEMAS MORRALLA
	//Model:
	//	'model' name=ID OPENDECL clazzes+=Class* CLOSEDECL;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Class:
	//	header=ClassHeader body=ClassBody;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//ClassHeader:
	//	'class' name=ID;
	public ClassHeaderElements getClassHeaderAccess() {
		return pClassHeader;
	}
	
	public ParserRule getClassHeaderRule() {
		return getClassHeaderAccess().getRule();
	}
	
	//ClassBody:
	//	OPENDECL (attributes+=AttrBody CLOSELINE | operations+=OpBody CLOSELINE)*
	//	CLOSEDECL;
	public ClassBodyElements getClassBodyAccess() {
		return pClassBody;
	}
	
	public ParserRule getClassBodyRule() {
		return getClassBodyAccess().getRule();
	}
	
	//AttrBody:
	//	VISIBILITY (name=ID ':' type=ID);
	public AttrBodyElements getAttrBodyAccess() {
		return pAttrBody;
	}
	
	public ParserRule getAttrBodyRule() {
		return getAttrBodyAccess().getRule();
	}
	
	//OpBody:
	//	'operation' name=ID OPENARG ((args+=ArgBody ',')* args+=ArgBody)? CLOSEARG ('return' type=ID)?;
	public OpBodyElements getOpBodyAccess() {
		return pOpBody;
	}
	
	public ParserRule getOpBodyRule() {
		return getOpBodyAccess().getRule();
	}
	
	//ArgBody:
	//	('in' | 'out') (name=ID ':' type=ID);
	public ArgBodyElements getArgBodyAccess() {
		return pArgBody;
	}
	
	public ParserRule getArgBodyRule() {
		return getArgBodyAccess().getRule();
	}
	
	//terminal VISIBILITY:
	//	'public' | 'private' | 'protected' | 'package';
	public TerminalRule getVISIBILITYRule() {
		return tVISIBILITY;
	}
	
	//terminal OPENDECL:
	//	'{';
	public TerminalRule getOPENDECLRule() {
		return tOPENDECL;
	}
	
	//terminal CLOSEDECL:
	//	'}';
	public TerminalRule getCLOSEDECLRule() {
		return tCLOSEDECL;
	}
	
	//terminal CLOSELINE:
	//	';';
	public TerminalRule getCLOSELINERule() {
		return tCLOSELINE;
	}
	
	//terminal OPENARG:
	//	'(';
	public TerminalRule getOPENARGRule() {
		return tOPENARG;
	}
	
	//terminal CLOSEARG:
	//	')';
	public TerminalRule getCLOSEARGRule() {
		return tCLOSEARG;
	}
	
	//terminal fragment LOWERCASE:
	//	'a'..'z';
	public TerminalRule getLOWERCASERule() {
		return tLOWERCASE;
	}
	
	//terminal fragment UPPERCASE:
	//	'A'..'Z';
	public TerminalRule getUPPERCASERule() {
		return tUPPERCASE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
