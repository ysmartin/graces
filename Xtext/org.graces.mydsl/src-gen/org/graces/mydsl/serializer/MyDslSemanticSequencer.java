/*
 * generated by Xtext 2.13.0
 */
package org.graces.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.graces.mydsl.myDsl.ArgBody;
import org.graces.mydsl.myDsl.AttrBody;
import org.graces.mydsl.myDsl.ClassBody;
import org.graces.mydsl.myDsl.ClassHeader;
import org.graces.mydsl.myDsl.Model;
import org.graces.mydsl.myDsl.MyDslPackage;
import org.graces.mydsl.myDsl.OpBody;
import org.graces.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ARG_BODY:
				sequence_ArgBody(context, (ArgBody) semanticObject); 
				return; 
			case MyDslPackage.ATTR_BODY:
				sequence_AttrBody(context, (AttrBody) semanticObject); 
				return; 
			case MyDslPackage.CLASS:
				sequence_Class(context, (org.graces.mydsl.myDsl.Class) semanticObject); 
				return; 
			case MyDslPackage.CLASS_BODY:
				sequence_ClassBody(context, (ClassBody) semanticObject); 
				return; 
			case MyDslPackage.CLASS_HEADER:
				sequence_ClassHeader(context, (ClassHeader) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.OP_BODY:
				sequence_OpBody(context, (OpBody) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArgBody returns ArgBody
	 *
	 * Constraint:
	 *     (name=ID type=ID)
	 */
	protected void sequence_ArgBody(ISerializationContext context, ArgBody semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ARG_BODY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ARG_BODY__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ARG_BODY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ARG_BODY__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArgBodyAccess().getNameIDTerminalRuleCall_1_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getArgBodyAccess().getTypeIDTerminalRuleCall_1_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttrBody returns AttrBody
	 *
	 * Constraint:
	 *     (name=ID type=ID)
	 */
	protected void sequence_AttrBody(ISerializationContext context, AttrBody semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ATTR_BODY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ATTR_BODY__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ATTR_BODY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ATTR_BODY__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttrBodyAccess().getNameIDTerminalRuleCall_1_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttrBodyAccess().getTypeIDTerminalRuleCall_1_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ClassBody returns ClassBody
	 *
	 * Constraint:
	 *     (attributes+=AttrBody | operations+=OpBody)+
	 */
	protected void sequence_ClassBody(ISerializationContext context, ClassBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassHeader returns ClassHeader
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ClassHeader(ISerializationContext context, ClassHeader semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CLASS_HEADER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CLASS_HEADER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassHeaderAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (header=ClassHeader body=ClassBody)
	 */
	protected void sequence_Class(ISerializationContext context, org.graces.mydsl.myDsl.Class semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CLASS__HEADER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CLASS__HEADER));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CLASS__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CLASS__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassAccess().getHeaderClassHeaderParserRuleCall_0_0(), semanticObject.getHeader());
		feeder.accept(grammarAccess.getClassAccess().getBodyClassBodyParserRuleCall_1_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID clazzes+=Class*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OpBody returns OpBody
	 *
	 * Constraint:
	 *     (name=ID (args+=ArgBody* args+=ArgBody)? type=ID?)
	 */
	protected void sequence_OpBody(ISerializationContext context, OpBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
